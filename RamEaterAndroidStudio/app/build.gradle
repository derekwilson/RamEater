apply plugin: 'com.android.application'

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

android {
    namespace 'derekwilson.net.rameater'
    compileSdk 33

    defaultConfig {
        applicationId "derekwilson.net.rameater"
        minSdkVersion 14
        targetSdkVersion 33
        versionCode 11
        versionName "1.0.7"
        buildConfigField "String", "GIT_HASH", "\"${getGitHash()}\""
    }

    signingConfigs {
        release {
        }
    }

    // Customise the output apk filename to be "rameater-buildtype-version-githash.apk"
    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "rameater-${variant.name}-${variant.versionName}-${getGitHash()}.apk"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.release

            def propsFile = rootProject.file('../LocalOnly/keystore.properties')
            def configName = 'release'
            if (propsFile.exists() && android.signingConfigs.hasProperty(configName)) {
                def props = new Properties()
                props.load(new FileInputStream(propsFile))
                android.signingConfigs[configName].storeFile = file(props['storeFile'])
                android.signingConfigs[configName].storePassword = props['storePassword']
                android.signingConfigs[configName].keyAlias = props['keyAlias']
                android.signingConfigs[configName].keyPassword = props['keyPassword']
            }
        }
    }

    afterEvaluate{
        // uncover to debug any signing issues
        //println "After evel Store password ==>" + android.signingConfigs.release.storePassword
        //println "After eval Key password ==>" + android.signingConfigs.release.keyPassword
    }

    sourceSets {
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'NOTICE'
        exclude 'APK LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // android support libs
    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:design:28.0.0'
}
